name: GDrive Batch Processing 


# Run with a CURL request:
# 
# curl                                                            \                                    
# -X POST                                                         \                                   
# -H "Accept: application/vnd.github+json"                        \                  
# -H "Authorization: Bearer GITHUB_PAT_KEY"                       \                  
# -H "X-GitHub-Api-Version: 2022-11-28"                           \                    
#     https://api.github.com/repos/ioroot/ffmpeg__bash-scripts/dispatches \         
#     -d '{"event_type":"run_autoflip","client_payload":{         \         
#             "GDRIVE_FOLDER":  "FOLDER/IN/GDRIVE/TO/USE",        \            
#         }                                                       \


on:

  # Via a webhook
  repository_dispatch:
    types: gdrive_batch_process

  workflow_dispatch:

env:

  # ╭──────────────────────────────────────────────────────────╮
  # │           Update Video Sheet with full new row           │
  # │                   including video_url                    │
  # ╰──────────────────────────────────────────────────────────╯
  # Google AppsScript Name: "Insert Video Sheet Row"
  APPS_SCRIPT: "https://script.google.com/macros/s/AKfycbxk4T_9A5eSPvH9BEVww_Pl9CgLw8QEyCrWlFstOJrOABFaJWNOEcFU684vbh8ueXI8iA/exec"

  # ╭──────────────────────────────────────────────────────────╮
  # │                  Google Drive Variables                  │
  # ╰──────────────────────────────────────────────────────────╯
  GDRIVE_SOURCE_FOLDER:     "/SocialExporter/batch_queue"
  GDRIVE_TARGET_FOLDER:     "/SocialExporter/videos/batch_processed"
  CONFIG_FILE_NAME:         "config.json"

  # ╭──────────────────────────────────────────────────────────╮
  # │              Where to upload the result to.              │
  # │                      - Server name                       │
  # │                     - Target folder.                     │
  # ╰──────────────────────────────────────────────────────────╯
  SERVER:                   "londonparkour.com"
  TARGET_FOLDER:            "/var/www/vhosts/media.londonparkour.com/processed"


jobs:



  create_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: install dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install --no-install-recommends jq

      - name: rclone
        uses: wei/rclone@v1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          args: lsf GDrive:${GDRIVE_SOURCE_FOLDER} | tr -d '//' > ./folderlist.txt

      - id: set-matrix
        run: |
          printf "matrix={\"include\":[" > ./matrix_file.txt
          cat ./folderlist.txt | while read LINE; do printf "{\"project\":\"%s\"}," $LINE >> ./matrix_file.txt ;done
          printf "]}" >> ./matrix_file.txt
          cat ./matrix_file.txt >> $GITHUB_OUTPUT




  run_ffmpeg:
    needs: create_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.create_matrix.outputs.matrix) }}
    steps:

      - name: Matrix Echo
        run: |
          echo ${{ matrix.project }}


      - name: install dependencies
        run: |
          sudo add-apt-repository ppa:savoury1/ffmpeg4
          sudo add-apt-repository ppa:savoury1/ffmpeg5
          sudo apt-get update 
          sudo apt-get install --no-install-recommends ffmpeg rclone ssh sshpass


      - name: Checkout Repo
        uses: actions/checkout@v3


      - name: rclone
        uses: wei/rclone@v1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          args: copy GDrive:${{ env.GDRIVE_SOURCE_FOLDER }}/${{ matrix.project }} ./raw_videos


      - name: read config.json
        run: |
          cd ./raw_videos
          if [ ! -f "./config.json" ]; then sudo cp ../.github/workflows/default_config.json ./config.json; fi
          sudo mv ./config.json ../
          cd ../
          cat ./config.json
          cat ./config.json | jq -c '.text_top'
          cat ./config.json | jq -c '.text_low'



      # Use sudo otherwise permissions to /tmp won't work in runner
      - name: run ffmpeg template
        run: |
          cd ${GITHUB_WORKSPACE}
          mkdir -p ./processed_video

          cat ./config.json | sudo jq -c '.text_top' | tr -d '"' > ./text_top.txt
          cat ./config.json | sudo jq -c '.text_low' | tr -d '"' > ./text_low.txt
          cat ./text_top.txt
          cat ./text_low.txt

          TEMPLATE=$(cat ./config.json | jq -c '.template // "ft_simple_orange.sh"' | tr -d '"')

          cd ./templates
          sudo ./$TEMPLATE -f ../raw_videos -o ../processed_video/processed.mp4 -t $(realpath ../text_top.txt) -b  $(realpath ../text_low.txt)
          cd ${GITHUB_WORKSPACE}


      - name: rclone
        uses: wei/rclone@v1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          args: copy ./processed_video GDrive:${GDRIVE_TARGET_FOLDER}/${{ matrix.project }}


  #     - name: Copy Video to Server
  #       run: |
  #         mkdir ~/.ssh
  #         ssh-keyscan -H ${{env.SERVER}} >> ~/.ssh/known_hosts

  #         SOURCE_DIR="./processed_videos/processed.mp4"
  #         TARGET_DIR="${TARGET_ROOT_FOLDER}${GDRIVE_FOLDER}"

  #         echo "SOURCE DIR: ${SOURCE_DIR}"
  #         echo "TARGET DIR: ${TARGET_DIR}"

  #         sshpass -p '${{secrets.SSH_PASS}}' ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.SSH_USER}}@${{env.SERVER}} "mkdir -p ${TARGET_DIR}"
  #         sshpass -p '${{secrets.SSH_PASS}}' scp -v -p -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${SOURCE_DIR} ${{secrets.SSH_USER}}@${{env.SERVER}}:${TARGET_DIR}


      # - name: Update google sheet with processed video folder
      #   run: |
      #     TEMPLATE=$(cat ./config.json | jq -c '.template // "ft_simple_orange.sh"' )"
      #     SCHEDULE=$(cat ./config.json | jq -c '.schedule // "TRUE"' )"
      #     curl "${{ env.APPS_SCRIPT }}?folder=%22${GDRIVE_FOLDER}%22"


  #     - name: Slack Notification
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #         SLACK_MESSAGE: ':rocket: Video Processed with ${{env.TEMPLATE}}. http://media.londonparkour.com/processed${{env.GDRIVE_FOLDER}}/processed.mp4'