name: Single Video Processing 


# Run with a CURL request:
# 
# curl                                                            \                                    
# -X POST                                                         \                                   
# -H "Accept: application/vnd.github+json"                        \                  
# -H "Authorization: Bearer GITHUB_PAT_KEY"                       \                  
# -H "X-GitHub-Api-Version: 2022-11-28"                           \                    
#     https://api.github.com/repos/ioroot/ffmpeg__bash-scripts/dispatches \         
#     -d '{"event_type":"run_autoflip","client_payload":{         \         
#             "GDRIVE_FOLDER":  "FOLDER/IN/GDRIVE/TO/USE",        \            
#         }                                                       \


on:

  # Via a webhook
  repository_dispatch:
    types: gdrive_video_convert

env:
  # ╭──────────────────────────────────────────────────────────╮
  # │                Target Google Sheet Script                │
  # ╰──────────────────────────────────────────────────────────╯
  # Google AppsScript Name: "Update Video Sheet"
  APPS_SCRIPT: "https://script.google.com/macros/s/AKfycbxk4T_9A5eSPvH9BEVww_Pl9CgLw8QEyCrWlFstOJrOABFaJWNOEcFU684vbh8ueXI8iA/exec"

  # ╭──────────────────────────────────────────────────────────╮
  # │                        Video URL                         │
  # │        1. Get Data from CURL request and webhook         │
  # │            2. or Get URL from commit message             │
  # ╰──────────────────────────────────────────────────────────╯
  GDRIVE_FOLDER_PREFIX:     "/SocialExporter/videos"
  GDRIVE_FOLDER:            ${{ github.event.client_payload.GDRIVE_FOLDER }}

  # ╭──────────────────────────────────────────────────────────╮
  # │                Aspect Ratio to output as.                │
  # ╰──────────────────────────────────────────────────────────╯
  TEMPLATE:             ${{ github.event.client_payload.TEMPLATE }}

  # ╭──────────────────────────────────────────────────────────╮
  # │                    Text for Template                     │
  # ╰──────────────────────────────────────────────────────────╯
  TEXT_TOP_B64:         ${{ github.event.client_payload.TEXT_TOP }}
  TEXT_BOTTOM:          "londonparkour.com/classes"

  # ╭──────────────────────────────────────────────────────────╮
  # │              Where to upload the result to.              │
  # │                      - Server name                       │
  # │                     - Target folder.                     │
  # ╰──────────────────────────────────────────────────────────╯
  SERVER:               'londonparkour.com'
  TARGET_ROOT_FOLDER:   '/var/www/vhosts/media.londonparkour.com/processed'


  YOUTUBE_AUDIO_PLAYLIST:   "https://www.youtube.com/playlist?list=PLKCo4y0JbV2Y41gOPI3pkn7nTyfUccd9n"

jobs:

  build:

    runs-on: ubuntu-latest
    container:
      
    steps:



      - name: list variables
        run: |
          env
          echo "TEXT_TOP_B64: ${{ env.TEXT_TOP_B64 }}"



      # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#repository_dispatch
      # https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#create-a-repository-dispatch-event
      - name: install dependencies
        run: |
          sudo add-apt-repository ppa:savoury1/ffmpeg4
          sudo add-apt-repository ppa:savoury1/ffmpeg5
          sudo apt-get update 
          sudo apt-get install --no-install-recommends ffmpeg rclone ssh sshpass


      - name: Checkout Repo
        uses: actions/checkout@v3



      - name: rclone
        uses: wei/rclone@v1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          args: copy GDrive:${GDRIVE_FOLDER_PREFIX}${GDRIVE_FOLDER} ./raw_videos



        # Use sudo otherwise permissions to /tmp won't work in runner
        # 
        # NOTE - Some templates DON'T use the -t flag. DO Include it in the template, just do nothing.
      - name: run ffmpeg template
        run: |
            echo "${{ env.TEXT_BOTTOM }}" > ./text_bottom.txt
            echo ${{ env.TEXT_TOP_B64 }} | base64 --decode > ./text_top.txt
            mkdir -p ./processed_videos
            cd ./templates
            sudo ./${{ env.TEMPLATE }} -f ../raw_videos/raw -o ../processed_videos/processed.mp4 -t $(realpath ../text_top.txt) -b $(realpath ../text_bottom.txt)



      - name: download music and overlay
        run: |
          cd ${GITHUB_WORKSPACE}/processed_video
          sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ./yt-dlp
          sudo chmod a+rx ./yt-dlp
          sudo ./yt-dlp ${{ env.YOUTUBE_AUDIO_PLAYLIST }} --playlist-random --max-downloads 1 --restrict-filenames --trim-filenames 20 --extract-audio --audio-format mp3 --postprocessor-args "-ss 00:00:00.00 -t 00:01:00.00" --output music.mp3 --force-overwrites || true
          sudo ffmpeg -i processed.mp4 -i music.mp3 -filter_complex amix=weights="10 1" -map 0:v -map 0:a -map 1:a -shortest output.mp4 || true
          sudo mv -f output.mp4 processed.mp4
          rm ./yt-dlp
          rm ./music.mp3



      - name: rclone
        uses: wei/rclone@v1
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        with:
          args: copy ./processed_videos GDrive:${GDRIVE_FOLDER_PREFIX}${GDRIVE_FOLDER}/processed



      - name: Copy Video to Server
        run: |
          mkdir ~/.ssh
          ssh-keyscan -H ${{env.SERVER}} >> ~/.ssh/known_hosts

          SOURCE_DIR="./processed_videos"
          TARGET_DIR="${TARGET_ROOT_FOLDER}${GDRIVE_FOLDER}"

          echo "SOURCE DIR: ${SOURCE_DIR}"
          echo "TARGET DIR: ${TARGET_DIR}"

          sshpass -p '${{secrets.SSH_PASS}}' ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.SSH_USER}}@${{env.SERVER}} "mkdir -p ${TARGET_DIR}"
          cd ${SOURCE_DIR}
          sshpass -p '${{secrets.SSH_PASS}}' scp -v -p -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null * ${{secrets.SSH_USER}}@${{env.SERVER}}:${TARGET_DIR}



      - name: Update google sheet with processed video folder
        run: |
          curl "${{ env.APPS_SCRIPT }}?folder=%22${GDRIVE_FOLDER}%22"



      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": ":rocket: Single Video Processed. http://media.londonparkour.com/processed${{ env.GDRIVE_FOLDER }}/processed.mp4"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK